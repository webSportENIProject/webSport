@model WUI.Models.RaceModel

@{
    ViewBag.Title = "Create";
}

@section css {
    @Styles.Render("~/Content/Race/css")
}

@section scriptsHeader{
    <script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?libraries=geometry,places&ext=.js&key=AIzaSyCmQ54LQucf9hRGkuQ1kGJM9EIFMr5vtT8"></script>

}

<h2>Création d'une course</h2>

@using (Html.BeginForm("Create", "Race", FormMethod.Post))
{
    // Génère un token dans le cookie d'authentification afin de contrer les
    // attaques de type Cross-site Request forgery
    @Html.AntiForgeryToken();
    
    // Grâce à la propriété "true", on affiche uniquement les erreurs
    // n'étant pas rattachées à la propriété du model (ici RaceModel)
    @Html.ValidationSummary(true)

        <div class="form-group">
            @Html.LabelFor(model => model.Title)
        </div>
        <div class="form-group">
            @Html.TextBoxFor(model => model.Title, new { @class="form-control", size = "30" })
            @Html.ValidationMessageFor(model => model.Title)
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description)
        </div>
        <div class="form-group">
            @Html.TextBoxFor(model => model.Description, new { @class="form-control", placeholder = "20 car. min", size = "30" })
            @Html.ValidationMessageFor(model => model.Description)
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateStart)
        </div>
        <div class="form-group">
            @Html.TextBoxFor(model => model.DateStart, new { @class="form-control", placeholder = "JJ/MM/AAAA", type="date", size = "30" })
            @Html.ValidationMessageFor(model => model.DateStart)
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateEnd)
        </div>
        <div class="form-group">
            @Html.TextBoxFor(model => model.DateEnd, new { @class="form-control", placeholder = "JJ/MM/AAAA", type="date", size = "30" })
            @Html.ValidationMessageFor(model => model.DateEnd)
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Town)
        </div>
        <div class="form-group">
            @Html.TextBoxFor(model => model.Town, new { @class="form-control", size = "30" })
            @Html.ValidationMessageFor(model => model.Town)
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MaxParticipants)
        </div>
        <div class="form-group">
            @Html.TextBoxFor(model => model.MaxParticipants, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.MaxParticipants)
        </div>
        <div class="form-group">
            @Html.HiddenFor(model => model.AjaxPoints)
            @Html.ValidationMessageFor(model => model.AjaxPoints)
        </div>

        <div id="mapid"></div>
        <br />
        <input id="Créer les points" type="button" value="Ajouter les points à la course" onclick="save();"  class="btn btn-default"/>

        <br />
        <br />
       <button type="submit" value="Créer la course" class="btn btn-default">Créer la course</button>
}


<div>
    @Html.ActionLink("Retour à la liste", "Index")
</div>


@section scripts {


    <script type="text/javascript">

        //You can calculate directions (using a variety of methods of transportation) by using the DirectionsService object.
        var directionsService = new google.maps.DirectionsService();

        //Define a variable with all map points.
        var _mapPoints = new Array();

        //Define a DirectionsRenderer variable.
        var _directionsRenderer = '';

        //This will give you the map zoom value.
        var zoom_option = 6;

        //LegPoints is your route points between two locations.
        var LegPoints = new Array();

        //Google map object
        var map;

        //InitializeMap() function is used to initialize google map on page load.
        function InitializeMap() {

            //DirectionsRenderer() is a used to render the direction
            _directionsRenderer = new google.maps.DirectionsRenderer();

            //Set the your own options for map.
            var myOptions = {
                zoom: zoom_option,
                zoomControl: true,
                center: new google.maps.LatLng(47.21806, -1.55278),
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };

            //Define the map.
            map = new google.maps.Map(document.getElementById("mapid"), myOptions);

            //Set the map for directionsRenderer
            _directionsRenderer.setMap(map);

            //Set different options for DirectionsRenderer mehtods.
            //draggable option will used to drag the route.
            _directionsRenderer.setOptions({
                draggable: true
            });

            //Add the doubel click event to map.
            google.maps.event.addListener(map, "dblclick", function (event) {
                var _currentPoints = event.latLng;
                _mapPoints.push(_currentPoints);
                LegPoints.push('');
                getRoutePointsAndWaypoints(_mapPoints);
            });

            //Add the directions changed event to map.
            google.maps.event.addListener(_directionsRenderer, 'directions_changed', function () {
                var myroute = _directionsRenderer.directions.routes[0];
                zoom_option = map.getZoom();
            });
        }


        //getRoutePointsAndWaypoints() will help you to pass points and waypoints to drawRoute() function
        function getRoutePointsAndWaypoints(Points) {
            drawRoutePointsAndWaypoints(Points);
        }


        function drawRoutePointsAndWaypoints(Points) {
            //Define a variable for waypoints.
            var _waypoints = new Array();

            if (Points.length > 2) //Waypoints will be come.
            {
                for (var j = 1; j < Points.length - 1; j++) {
                    var address = Points[j];
                    if (address !== "") {
                        _waypoints.push({
                            location: address,
                            stopover: true  //stopover is used to show marker on map for waypoints
                        });
                    }
                }
                //Call a drawRoute() function
                drawRoute(Points[0], Points[Points.length - 1], _waypoints);
            } else if (Points.length > 1) {
                //Call a drawRoute() function only for start and end locations
                drawRoute(Points[_mapPoints.length - 2], Points[Points.length - 1], _waypoints);
            } else {
                //Call a drawRoute() function only for one point as start and end locations.
                drawRoute(Points[_mapPoints.length - 1], Points[Points.length - 1], _waypoints);
            }
        }


        //drawRoute() will help actual draw the route on map.
        function drawRoute(originAddress, destinationAddress, _waypoints) {
            //Define a request variable for route .
            var _request = '';

            //This is for more then two locatins
            if (_waypoints.length > 0) {
                _request = {
                    origin: originAddress,
                    destination: destinationAddress,
                    waypoints: _waypoints, //an array of waypoints
                    optimizeWaypoints: false, //set to true if you want google to determine the shortest route or false to use the order specified.
                    travelMode: google.maps.DirectionsTravelMode.WALKING
                };
            } else {
                //This is for one or two locations. Here noway point is used.
                _request = {
                    origin: originAddress,
                    destination: destinationAddress,
                    travelMode: google.maps.DirectionsTravelMode.WALKING
                };
            }

            //This will take the request and draw the route and return response and status as output
            directionsService.route(_request, function (_response, _status) {
                if (_status == google.maps.DirectionsStatus.OK) {
                    _directionsRenderer.setDirections(_response);
                } else {
                    console.log(_response);
                }
            });
        }


        function save() {
            var AjaxPoints = document.getElementById('AjaxPoints');
            AjaxPoints.setAttribute("value", JSON.stringify(_mapPoints));
        }

        google.maps.event.addDomListener(window, "load", InitializeMap);
    </script>

}