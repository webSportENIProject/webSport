@using WUI.Models
@model IEnumerable<RaceModel>

@{
    ViewBag.Title = "Index";
}

@section css {
    @Styles.Render("~/Content/Race/css")
}

@section scriptsHeader{
    <script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?libraries=geometry,places&ext=.js&key=AIzaSyCmQ54LQucf9hRGkuQ1kGJM9EIFMr5vtT8"></script>

}

<h2>Liste des courses</h2>
@if (User.IsInRole("Administrateur"))
{
    <p>
        <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
        @Html.ActionLink("Créer une nouvelle course", "Create")
    </p>
}
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DateStart)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DateEnd)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Town)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.MaxParticipants)
            </th>
            <th>
                Nb Inscrits
            </th>

            <th class="col-xs-1 col-sm-1 col-md-1 col-lg-1">&nbsp;</th>
        </tr>
    </thead>
    <tbody>
        @if (Model != null)
        {
            foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Title)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Description)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.DateStart)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.DateEnd)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Town)
                    </td>
                    <td>
                        @if (item.MaxParticipants != 0)
                        {
                            @Html.DisplayFor(modelItem => item.MaxParticipants);
                    }
                    else {
                            <div>Indéfini</div>
                        }
                    </td>

                    <td>
                        @if (item.Participants != null)
                    {
                        var nbParticipants = item.Participants.Count();
                            @(nbParticipants);
                    }
                    </td>

                    <td>
                        @Html.ActionLink("S'inscrire", "Register", new { id = item.Id })
                        @if (User.IsInRole("Administrateur"))
                        {
                            @Html.ActionLink("Modifier", "Edit", new { id = item.Id })<br/>
                            @Html.ActionLink("Supprimer", "Delete", new { id = item.Id })
                        }
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<div id="mapid"></div>

@section scripts {
    @Scripts.Render("~/bundles/Race/js")

    <script type="text/javascript">
        var geocoder;
        var map;

            //Titre - Latitude - Longitude - Image - Description
        var beaches = [
            ['Title1', 47.21806, -1.55278, 'cat1', 'Content1'],
            ['Title2', 47.31806, -1.45278, 'cat1', 'Content2'],
            ['Title3', 47.41806, -1.75278, 'cat2', 'Content3'],
            ['Title3', 47.41806, -1.55278, 'cat2', 'Content4']
        ];

        function initialize() {
            var map = new google.maps.Map(
              document.getElementById("mapid"), {
                  center: new google.maps.LatLng(47.21806, -1.55278),
                  zoom: 13,
                  mapTypeId: google.maps.MapTypeId.HYBRID
              });

            //Dessin des markers
            for (i = 0; i < beaches.length; i++) {
                marker = new google.maps.Marker({
                    position: new google.maps.LatLng(beaches[i][1], beaches[i][2]),
                    map: map,
                    title: beaches[i][0]
                });

                var content = beaches[i][4];

                var infowindow = new google.maps.InfoWindow();

                google.maps.event.addListener(marker, 'click', (function (marker, content, infowindow) {
                    return function () {
                        infowindow.setContent(content);
                        infowindow.open(map, marker);
                    };
                })(marker, content, infowindow));
            }

            //Dessin de la route
            for (var t = 0;
              (t + 1) < beaches.length; t++) {

                //Intialize the Direction Service
                var service = new google.maps.DirectionsService();
                var directionsDisplay = new google.maps.DirectionsRenderer();

                var bounds = new google.maps.LatLngBounds();
                if ((t + 1) < beaches.length) {
                    var src = new google.maps.LatLng(beaches[t][1], beaches[t][2]);
                    var des = new google.maps.LatLng(beaches[t + 1][1], beaches[t + 1][2]);
                    console.log("src=" + src.toUrlValue() + " dest=" + des.toUrlValue());
                    service.route({
                        origin: src,
                        destination: des,
                        travelMode: google.maps.DirectionsTravelMode.WALKING
                    }, function (result, status) {
                        if (status == google.maps.DirectionsStatus.OK) {

                            var path = new google.maps.MVCArray();
                            //Set the Path Stroke Color

                            var poly = new google.maps.Polyline({
                                map: map,
                                strokeColor: '#4986E7'
                            });
                            poly.setPath(path);
                            for (var k = 0, len = result.routes[0].overview_path.length; k < len; k++) {
                                path.push(result.routes[0].overview_path[k]);
                                bounds.extend(result.routes[0].overview_path[k]);
                                map.fitBounds(bounds);
                            }
                        } else alert("Directions Service failed:" + status);
                    });
                }
            }
        }
        google.maps.event.addDomListener(window, "load", initialize);

    </script>

}